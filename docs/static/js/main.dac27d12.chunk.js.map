{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAgBhD,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEtC,OACI,sBAAKc,UAAY,yCAAjB,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECAf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDjB0BK,CAAc1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAErB,OACI,cADK,CACL,sBACI,qBAAIJ,UAAY,qCAAhB,cAAwDhB,EAAxD,OACEoB,GAAW,mBAAGJ,UAAY,mCAAf,yBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAEC,GAAF,OACR,aADqB,CACpB,EAAD,eAESA,GADGA,EAAIC,aEb3BgB,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,KADhB,mBACvB0C,EADuB,KACX3C,EADW,KAG9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,EAAgB2C,WAAeA,IAC9D,uBACA,6BAEQA,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MCVpC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dac27d12.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { PropTypes } from \"prop-types\";\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value )\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 0){\n            setCategories( cat => [inputValue, ...cat ] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit = { handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","// Componente para obtener gifs de una categoria en form asincrona\nexport const getGifs = async( category ) => { \n    // Se crea un arreglo con los atributos que se necesitan (id, title y url)\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=ZVWjpkBlmPS86GBPpzI6p6KDYiXWjLeG`;\n    const resp = await fetch( url ); // espera la respuesta de la url\n    const { data } = await resp.json(); // espera en data la conversion a json de la respuesta\n\n    const gifs = data.map( img => { \n        return { // crea un array con id, title y url de cada elemento del array data\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs; // re torna el array 'gifs'\n\n}\n","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    return (\n        <div className = 'card animate__animated animate__fadeIn' >\n            <img src = { url } alt = { title }/>\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return ( // retorna un componente \n        <>\n            <h3 className = ' animate__animated animate__fadeIn'> { category } </h3>    \n            { loading && <p className = 'animate__animated animate__flash'>Cargando...</p>}\n\n            <div className=\"card-grid\">\n                { \n                    images.map( ( img ) => ( // procesa 'images' con GifGridItem \n                        <GifGridItem \n                            key = { img.id } // pasa el valor de key con el id de la img\n                            { ...img } // pasa el resto de las 'props' con spread\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/GetGifs'\n\n// Custom Hook\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({ // se crea un setState para state\n        data: [], // valores iniciales\n        loading: true\n    });\n\n    useEffect(() => { // useEffect para controlar que renderize solo al cambiar category\n\n        getGifs( category ) // obtiene gifs de categoria como promesa\n            .then( imgs => { // procesa la promesa exitosa\n                setState({ // establece el nuevo 'state'\n                    data: imgs,\n                    loading: false\n                })\n            })\n\n    }, [category])\n\n    return state; // retorna el state\n}\n\n\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState([''])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>    \n            <AddCategory setCategories = { setCategories } categories = { categories } />\n            <hr />\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key = { category }\n                            category = { category } \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}